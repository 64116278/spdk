{"name":"Storage Performance Development Kit","tagline":"SPDK","body":"Storage Performance Development Kit\r\n===================================\r\n\r\nThe Storage Performance Development Kit (SPDK) provides a set of tools\r\nand libraries for writing high performance, scalable, user-mode storage\r\napplications.\r\nIt achieves high performance by moving all of the necessary drivers into\r\nuserspace and operating in a polled mode instead of relying on interrupts,\r\nwhich avoids kernel context switches and eliminates interrupt handling\r\noverhead.\r\nThe toolkit currently includes an NVMe driver.\r\n\r\nDocumentation\r\n=============\r\n\r\n[Doxygen API documentation](https://spdk.github.io/spdk/doc/)\r\n\r\n[Porting Guide](https://github.com/spdk/spdk/blob/master/PORTING.md)\r\n\r\nPrerequisites\r\n=============\r\n\r\nTo build SPDK, some dependencies must be installed.\r\n\r\nFedora/CentOS:\r\n\r\n- gcc\r\n- libpciaccess-devel\r\n- CUnit-devel\r\n\r\nUbuntu/Debian:\r\n\r\n- gcc\r\n- libpciaccess-dev\r\n- make\r\n- libcunit1-dev\r\n\r\nFreeBSD:\r\n\r\n- gcc\r\n- libpciaccess\r\n- gmake\r\n- cunit\r\n\r\nAdditionally, [DPDK](http://dpdk.org/doc/quick-start) is required. This is packaged on some Linux distributions, but otherwise:\r\n\r\n    1) cd /path/to/spdk\r\n    2) wget http://dpdk.org/browse/dpdk/snapshot/dpdk-2.2.0.tar.gz\r\n    3) tar xfz dpdk-2.2.0.tar.gz\r\n    4) cd dpdk-2.2.0\r\n\r\nLinux:\r\n\r\n    5) make install T=x86_64-native-linuxapp-gcc\r\n\r\nFreeBSD:\r\n\r\n    5) gmake install T=x86_64-native-bsdapp-clang\r\n\r\nBuilding\r\n========\r\n\r\nOnce the prerequisites are installed, run 'make' within the SPDK directory\r\nto build the SPDK libraries and examples.\r\n\r\n    make DPDK_DIR=/path/to/dpdk\r\n\r\nIf you followed the instructions above for building DPDK:\r\n\r\nLinux:\r\n\r\n    make DPDK_DIR=./dpdk-2.2.0/x86_64-native-linuxapp-gcc\r\n\r\nFreeBSD:\r\n\r\n    gmake DPDK_DIR=./dpdk-2.2.0/x86_64-native-bsdapp-clang\r\n\r\nHugepages and Device Binding\r\n============================\r\n\r\nBefore running an SPDK application, some hugepages must be allocated and\r\nany NVMe devices must be unbound from the native NVMe kernel driver.\r\nSPDK includes scripts to automate this process on both Linux and FreeBSD.\r\n\r\n    1) scripts/configure_hugepages.sh\r\n    2) scripts/unbind_nvme.sh","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}